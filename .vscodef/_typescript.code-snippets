{
	// Place your guiho workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

  "Copyright TS Elysia": {
    "prefix": "-copyright-ts-elysia",
    "body": [
      "/**",
      " * @copyright Copyright © ${CURRENT_YEAR} GUIHO Technologies as represented by Cristóvão GUIHO. All Rights Reserved.",
      " */",
      "",
      "import { Elysia } from 'elysia'",
      "",
      "export { ${TM_FILENAME_BASE/-(.)/${1:/upcase}/g} }",
      "export type {  }",
      "",
      "const ${TM_FILENAME_BASE/-(.)/${1:/upcase}/g} = new Elysia({ name: '$TM_FILENAME_BASE', prefix: '/$TM_FILENAME_BASE' })",
      "  $1",
      ""
    ],
    "description": "Get GUIHO Copyright and elysia imports."
  },

	"Generate translation object": {
		"prefix": "-translation",
		"scope": "typescriptreact,typescript",
		"body": [
			"const translation = {",
			" en: { $1 },",
      " ",
      " pt: {},",
      " ",
      " fr: {},",
      " ",
      " es: {},",
 		"}",
		],
		"description": "Generate translation object"
	},
	"Generate translation en object": {
		"prefix": "-translation-en",
		"scope": "typescriptreact,typescript",
		"body": [
      "const en = {",
      "  $1",
			"}",
      "",
      "const t = en"
		],
		"description": "Generate translation en object"
	},

	"logger": {
		"prefix": "-logger",
		"scope": "typescriptreact,typescript",
		"body": [
      "const logger = createLogger$1('$TM_FILENAME')",
		],
		"description": "logger"
	},
	
	"logger-top-level": {
		"prefix": "-logger-top-level",
		"scope": "typescriptreact,typescript",
		"body": [
			"const topLevelLogger = createLogger$1('$TM_FILENAME')",
		],
		"description": "logger-top-level"
	},

	"logger-uuid": {
		"prefix": "-logger-uuid",
		"scope": "typescriptreact,typescript",
		"body": [
			"const logger = createLogger$1('uuid-$UUID')",
		],
		"description": "logger-uuid"
	},

}

